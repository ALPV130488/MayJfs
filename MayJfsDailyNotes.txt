0-off,1-on-binary			------------>Ascii,Unicode 

programming lang-----programs(set of instruction)


						computer lang
				
				scripting lang						programming lang
				
			html,css,js,react,angular...		pop						oop
											basic....python..		java,.net,c++,....
s.l :- designing websites	

p.l  :-	devoloping softwares				
						
						
	oop
	===


	Abstraction,Encapsulation :-Security
	
	Inheritance,Ploymorphosm:- Performance
	
	
	java----->oops oopl
	
	

java
====

platform independency


Garbage collector  


			history:- sun microsystem---->green team
			
			green talk(.gt)--------->oak ----------->java(.java) jdk 1.0

			sunmicro sys----------------------------->oracle
			
			jdk(java development kit)  1.0 ---------->jdk 22
			
			
			james gosling
			
			
			jse/j2se:-(core java)[no client - server ]-standalone app's
			
			
			jee/j2ee:-(Adv java)[client-server] - distributed app's			--web app
			
			
			jme/j2me:-(micro details)---mobile app's------>/android/ios
			
			
			jdk checking :-
			
			cmd> java --version
			
			
			
			53  - keywords/reserved word
			
			ide shortcuts :-
			==============
			
			
			syso --->ctrl + space ===print
			
			ctrl + shift + o ---->imports
			
			ctrl +shift +/  ------->multiline comments
			
			ctrl +  / -------->single line comments
			
			
	operators:-
	
	a+b		(a,b) --->operands  + --operators
	
	
	U- Unary 
	L-Logical
	T-Terinary
	R-Relational 
	A-Assignment
	A-Arithemetic
	B-Bitwise
	
	
									variables:-
									
			syntax:-
					datatype varname = value;

					
					
		2 types of variables :-
		
		(1)local variables(inside the met)			(2)Global variables(outside the met)
												
												static global var			instance global var
												

syntax:-
=======
												
static:-	static datatype varname = value;


instance:-		datatype varname = value;									

memory allocation:-
==================
static:- static prop's(met,var,con.) will gets the memory space only once when the class loading 
				into the jvm

instance:-	Instance prop's will gets the memory space for every object creation

Access:-
=======
static:-Static prop's can be accessed by the "class reference"

instance:-Instance prop's can be accessed by the "obj reference"


			object creation syntax:-
			
			classname objname = new classname();

Usage:-
======
static:-Used to store Common data

instance:-Used to store Unique data

Memory Area:-
===========
static :-stored in the method area

instance :-stored in the  heap area	



Flow control Statements :-


(1)Conditional statements :-if-else;switch

(2)Iterative statements :-while,do-while;for;for-each


Method:-It's set of statements where all together performs a task.

	syntax/signature:-
	
					accessmodifier returntype methodname(params..){
					
					//body(or)method implementation
					
					}
					
			variables --->class members
			
			methods------>member functions
			
		class = class members(var's)+member functions(method's) + constr
		
		
		based on the syntax - divided into 2 types:-
		
		(1)static methods	(static prop's)
		
		
		syntax:-	accessmodifier static returntype methodname(params..){
					
					//body(or)method implementation
					
					}
		
		(2)Dynamic methods	(instance prop's)
		
		syntax :-
			
					accessmodifier returntype methodname(params..){
					
					//body(or)method implementation
					
					}
					

Inheritance:-Accquring parent class properties to the child class.

				*code reuseability

		EXTENDS 					IMPLEMENTS
	class---->class 				interface ----->class
	
	

	class A{   //parent/super
	
	100 methods
	}
	class B A{	//child/sub
	
	10 method + 100  ---->110
	}		
	
	
	
	
	
	class A{				class B{
	
	add(a,b){				add(a,b){
	(a+b)					(a*b)
	}}							}}
	
	class C extends A,B{
	
	add(2,3);
	}
	
	
	M.I is not supported in java @ class level
	
	M.I is supported in java @interface level
	
	
	based on the methods body -----> 2 types
	
	(1)concrete methods:-methods with method body
	
					accessmodifier returntype methodname(params..){
					
					//body(or)method implementation
					
					}
	
	
	
	(2)abstract methods:- methods without method body
	
					accessmodifier abstract returntype methodname(params..);
					
					
	
	class   :- it's the collection of only concrete methods
	
	abstract class :- it is the combination of both abstract methods + concrete methods
	
	interface  :- it's the collection of only abstract methods
	
	
	Abstraction:- Hiding of data    
	
				*Security
	
	
	class -  0%				interface --  100%           abstract class -0%-100%
	
	
	Ploymorphism:-
	
		*Code Reausability	
	
	(1)MethodOverloading :-method name is same but difference is in it's parameters
	
								(a)type:-of parameters
								
								(b)order:-of parameters
								
								(c)no:-of parameters
	
	(2)MethodOverriding :-method name is same but difference is in the method body
	
	class Parent{
	
	1000Cr.(){}
	
	marriage(){
	Kajol;
	}
	
	1000 methods
	}
	
	class Child extends Parent{
	
	1000Cr.(){}
	
	@Override
	marriage(){
	Deepika;
	}
	
	1000 methods
	
	}
	
	Encapsulation:-  It will wraps entire data into a single unit.
	=============
					*Security
					
					
	Constructor:-	It will initializes the objects of a class.
	============
			
			classname objname  = new classname();
			
			syntax:-
			
			accessmodifier  classname(){
			
			//body							----------->default constructor
			}
	
	
			accessmodifier classname(parms...){
			
			//body                      ------------ ----->parametrized constructor
			
			}
	
	
	note:- constructor call must be the first statement inside a constructor
	
	note :- default parent class for every java file is "java.lang.Object"
	
	
	note :- the default package for every java file is "java.lang.*"